////////////////////////////////////////////////////////////////////////////////
// ECE 510: SystemVerilog
// Portland State University - Spring 2013
// Final Project:
//
// File:    cachePkg.sv
// Authors: Eric Krause, Bradon Kanyid, Tyler Tricker
// Description: it is a package
//
////////////////////////////////////////////////////////////////////////////////

`ifndef cachePkg__
`define cackePkg__

package cachepkg;

typedef enum bit { FALSE, TRUE } bool_t;

typedef enum bit { INVALID, VALID } valid_t;

typedef enum { RESET,
               INVALIDATE,
               READ,
               WRITE,
               NOP,
               RFO } inst_t;

typedef enum { RESET,
               IDLE,
               EVICT_CONFLICT,
               WRITEBACK,
               CLEAR_IRQ,
               LOOKUP,
               MISS,
               GET_NEXT,
               RW } state_t;


// returns true if the tag is found in a set
automatic bool_t function exists(input set_t set, input bit [TAGBITS-1:0] tag);
  foreach(set.way[i]) begin
    if (set.way[i].tag == tag)
      return TRUE;
  end
  return FALSE;
endfunction

// returns an index indicating which way has the shit
automatic int function getway(input set_t set, input bit [TAGBITS-1:0] tag);
  foreach(set.way[i]) begin
    if (set.way[i].tag == tag)
      return i;
  end
  return -1;  //probably not necessary
endfunction


endpackage

`endif
