////////////////////////////////////////////////////////////////////////////////
// ECE 510: SystemVerilog
// Portland State University - Spring 2013
// Final Project:
//
// File:    cachePkg.sv
// Authors: Eric Krause, Bradon Kanyid, Tyler Tricker
// Description: it is a package
//
////////////////////////////////////////////////////////////////////////////////

`ifndef cachePkg__
`define cackePkg__

package cachepkg;

typedef enum bit { FALSE, TRUE } bool_t;

typedef enum bit { INVALID, VALID } valid_t;

typedef enum { RESET,
               INVALIDATE,
               READ,
               WRITE,
               NOP,
               RFO } inst_t;

typedef enum { RESET,
               IDLE,
               EVICT_CONFLICT,
               WRITEBACK,
               CLEAR_IRQ,
               LOOKUP,
               EVICT,
               GET_NEXT,
               RW } state_t;

automatic task state_t next_st(input state_t current_st);
  int curr_way;

  if (bus.reset)
    next_st = RESET;

  else
    case(current_st)
      RESET:          next_st = IDLE;

      IDLE:           if (bus.evict)  next_st = EVICT_CONFLICT;
                      else if (bus.request) next_st = LOOKUP;
                      else next_st = IDLE;

      EVICT_CONFLICT: if ( ( exists(set[curr_set], curr_tag) ) &&
                        set[curr_set].way[getway(set[curr_set], curr_tag)].dirty )
                        next_st = WRITEBACK;
                      else
                        next_st = CLEAR_IRQ;

      WRITEBACK:      next_st = CLEAR_IRQ;

      CLEAR_IRQ:      next_st = IDLE;

      LOOKUP:         
      EVICT:          if (bus.invalidate) next_st = EVICT_CONFLICT;
                      else next_st = GET_NEXT;
      GET_NEXT:       next_st = RW;
      RW:             next_st = IDLE;
    endcase

endtask

// returns true if the tag is found in a set
automatic bool_t function exists(input set_t set, input bit [TAGBITS-1:0] tag);
  foreach(set.way[i]) begin
    if (set.way[i].tag == tag)
      return TRUE;
  end
  return FALSE;
endfunction

// returns an index indicating which way has the shit
automatic int function getway(input set_t set, input bit [TAGBITS-1:0] tag);
  foreach(set.way[i]) begin
    if (set.way[i].tag == tag)
      return i;
  end
  return -1;  //probably not necessary
endfunction


endpackage

`endif
